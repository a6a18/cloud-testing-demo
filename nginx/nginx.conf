events {
    worker_connections 1024;
}

http {
    upstream api_backend {
        # 支援多個API節點的負載平衡
        # Docker Compose會自動解析服務名稱到多個容器
        server api:5000 max_fails=3 fail_timeout=30s;
        
        # 負載平衡算法 (round-robin)
        # 可選: least_conn, ip_hash, hash
    }
    # 如果你發現，使用 docker-compose scale api=3 時，Nginx 只使用一個節點，可以嘗試以下設定。
    # # ✅ 使用 Docker 內建 DNS（127.0.0.11）
    # # 讓 Nginx 可以動態解析 service name（例如 api）對應的多個容器 IP
    # # valid=10s → 每 10 秒重新查詢一次
    # resolver 127.0.0.11 valid=10s ipv6=off;

    # upstream api_backend {
    #     # ✅ zone → 允許 Nginx 儲存 DNS 查詢結果（必須設定）
    #     zone api_backend 64k;

    #     # ✅ resolve → 讓 Nginx 每次請求時重新查詢 DNS（動態獲取容器 IP）
    #     # 這樣當 docker-compose scale api=3 時，Nginx 會使用多個 IP
    #     server api:5000 resolve max_fails=3 fail_timeout=30s;
    # }

    # 日誌格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # 基本設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip 壓縮
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    server {
        listen 80;
        server_name localhost;

        # 健康檢查端點
        location /health {
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 健康檢查超時設定
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # API 路由
        location /api/ {
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超時設定
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 緩衝設定
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # 靜態文件 (可選)
        location / {
            return 200 'Cloud Testing Environment - Nginx Load Balancer\n';
            add_header Content-Type text/plain;
        }
    }
}


# 在 Docker Compose + Nginx（無 resolve）的環境下，負載均衡效果不可靠。
# 需要額外配置（如 resolver + resolve）或使用真實負載均衡器，才能模擬雲端行為。
# 你可以 讓 Nginx 以 resolver + resolve + least_conn 來模擬 AWS 負載均衡。